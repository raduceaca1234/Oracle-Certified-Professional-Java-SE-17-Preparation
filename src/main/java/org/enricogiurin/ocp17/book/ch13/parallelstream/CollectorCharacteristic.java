package org.enricogiurin.ocp17.book.ch13.parallelstream;

import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentMap;
import java.util.stream.Collector;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;

//generated by CGPT
public class CollectorCharacteristic {

  public static void main(String[] args) {
    new CollectorCharacteristic().check();

  }

  public void check() {

    Collector<String, ?, ConcurrentMap<Integer, String>> toConcurrentMap = Collectors.toConcurrentMap(
        String::length,
        k -> k,
        (s1, s2) -> s1 + "," + s2);
    checkCollectorCharacteristics("toConcurrentMap", toConcurrentMap);

    Collector<Object, ?, Set<Object>> toSet = Collectors.toSet();
    checkCollectorCharacteristics("toSet", toSet);

    Collector<String, ?, ConcurrentMap<Integer, List<String>>> groupingByConcurrent = Collectors.groupingByConcurrent(
        String::length);
    checkCollectorCharacteristics("groupingByConcurrent", groupingByConcurrent);

  }

  private void checkCollectorCharacteristics(String collectorName, Collector<?, ?, ?> collector) {
    System.out.println(collectorName + " Characteristics:");
    Set<Characteristics> characteristics = collector.characteristics();
    characteristics.forEach(System.out::println);

  }

}
